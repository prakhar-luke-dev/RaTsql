{
  "ref_id": "query_00005",
  "query": "Over the past 14 days - Which campaign had the lowest conversion rate?",
  "sql": "SELECT gcd.campaign_name, SAFE_DIVIDE(SUM(gcp.metrics_conversions), SUM(gcp.metrics_interactions)) * 100 AS conversion_rate\nFROM advida-data-pipeline.manager_dataset_preprod_updated.google_ads_campaign_performance_2643649617 gcp\nJOIN advida-data-pipeline.manager_dataset_preprod_updated.google_ads_campaign_details_2643649617 gcd \nON gcp.campaign_id = gcd.campaign_id\nWHERE gcd.customer_id = 3424742100\nAND gcp.segments_date BETWEEN DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)\nGROUP BY gcd.campaign_id, gcd.campaign_name\nHAVING conversion_rate > 0\nORDER BY conversion_rate ASC\nLIMIT 1",
  "tables": [
    "campaign_details",
    "campaign_performance"
  ],
  "columns": [
    "campaign_id",
    "campaign_name",
    "conversion_rate",
    "customer_id",
    "metrics_conversions",
    "metrics_interactions",
    "segments_date"
  ],
  "table_column_map": {
    "campaign_details": [
      "campaign_id",
      "campaign_name",
      "conversion_rate",
      "customer_id"
    ],
    "campaign_performance": [
      "campaign_id",
      "conversion_rate",
      "metrics_conversions",
      "metrics_interactions",
      "segments_date"
    ]
  },
  "brand_id": "3424742100",
  "brand_name": "Morning Kick - Roundhouse",
  "category": "Campaign",
  "instructions": "Date Functions : \n        - Whenever previous \"X\" days are mentioned :\n            - ALWAYS excludes current day:\n            - Formula: `DATE_SUB(CURRENT_DATE(), INTERVAL X DAY) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`\n            - Example: \"last 7 days\" = `DATE_SUB(CURRENT_DATE(), INTERVAL 7 DAY) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`\n            - Example: \"last 14 days\" = `DATE_SUB(CURRENT_DATE(), INTERVAL 14 DAY) AND DATE_SUB(CURRENT_DATE(), INTERVAL 1 DAY)`\n  \n        - Whenever \"This month\" is mentioned:\n            - Always select from 1st to today's date:\n            - Formula: `BETWEEN DATE_TRUNC(CURRENT_DATE(), MONTH) AND CURRENT_DATE()`\n        \n        - Whenever \"Last week\" or \"previous week\" is mentioned:\n            - Always Sunday to Saturday of previous week:\n            - Formula: `DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK(SUNDAY)), INTERVAL 1 WEEK) AND DATE_SUB(DATE_TRUNC(CURRENT_DATE(), WEEK(SUNDAY)), INTERVAL 1 DAY)`\n        \n        - Whenever \"Last month\" or \"previous month\" is mentioned:\n            - Always 1st to end of previous month:\n            - Formula: `DATE_SUB(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 1 MONTH) AND DATE_SUB(DATE_TRUNC(CURRENT_DATE(), MONTH), INTERVAL 1 DAY)`\n   \n        - Use SAFE_DIVIDE(SUM(x), SUM(y)) rather than AVG(SAFE_DIVIDE(x, y)) to compute the average order value over a date range.\n        - When no specific date or date range is defined in the question, use aggregate functions cumulative for ENTIRE date range of the data.\n        - When year is not specified, use the year {current_year} as the default year.\n\n\n\n## PERFORMANCE ANALYSIS GUIDELINES :\n    - Primary Metrics to Use for Performance Evaluation (Any Entity):\n        - Priority 1 : Conversions (higher is better)\n        - Priority 2 (tie-breaker) : Spend (lower is better)\n        - Note : \n            - Always show eCPA in the final output if the question is about profitability or success or performance or such\n            - Do not use eCPA as a metric for ranking.\n            - 3 things should be present in the final output: \n                - total_conversions\n                - total_cost\n                - eCPA\n\n    - Top/Best Performing or \"Most Profitable\" Entities :\n        - Priority 1 : Rank by highest total_conversions (descending)\n        - Priority 2 (tie-breaker) : Use lowest total_cost (ascending)\n\n    - Worst/Least Performing/Profitable Entities :\n        - Priority 1 : Include all entities \u2014 including those with zero or null conversions\n        - Priority 2 (tie-breaker) : Rank by lowest total_conversions (ascending)\n        - Priority 3 (final tie-breaker) : Use highest total_cost (descending)",
  "instructions_comment": "nan"
}