# -*- coding: utf-8 -*-
# Project :
# File    : states.py
# Author  : prakhar-luke-dev
# Email   : prakhar.luke.dev@gmail.com
# Time    : 7/28/25 3:29â€¯PM


from langgraph.graph import MessagesState, START
from typing import Optional
#===========================================================================
#                            GLOBAL STATE
#===========================================================================

class GlobalState(MessagesState):
    """
    Global state for RaTsql graph.

    Attributes:
        data_query (str) : The data query provided by decomposer.
        similar_data_query (dict) : A dictionary containing similar data queries and their scores along with metadata.
        similarity_threshold (float) : The threshold for similarity to consider a data query as relevant.
        pruned_schema (dict) : Pruned schema obtained from the RAG or from the full approach.
        final_answer (str) : The final answer generated by the RaTsql graph.

    """
    data_query : str
    similar_data_query : dict
    similarity_threshold : float
    pruned_schema: dict
    final_answer: str


#===========================================================================
#                            HEAD STATE
#===========================================================================
class HeadState(GlobalState):
    """
    State for the head node of RaTsql graph.

    Attributes:
        rout_schema_through_rag (bool) : Flag to determine if the schema should be routed through RAG.

    """
    rout_schema_through_rag : bool


#===========================================================================
#                            BODY STATE
#===========================================================================
    
class BodyState(HeadState):
    extracted_schema_from_sql1 : dict
    dense_schema : dict
    hints : dict
    gen_sql1 : str
    res_sql1 : str

    gen_sql2 : str
    res_sql2 : str
    
    gen_sql3 : str
    res_sql3 : str

    max_retires_remaining : int
    # final_answer : str

#===========================================================================
#                            TAIL STATE
#===========================================================================

class TailState(BodyState):
    need_feedback : bool
    feedback_category : bool # true = positive, false = negative
    feedback_message : str
    

